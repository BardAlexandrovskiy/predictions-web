{"version":3,"sources":["App/styles.js","components/Footer/styles.js","components/Footer/index.js","screens/CrystalBallScreen/styles.js","constants/magicBallAnswersArr.js","screens/CrystalBallScreen/index.js","constants/getRandomIntFunction.js","screens/PredictionScreen/styles.js","screens/PredictionScreen/index.js","screens/HatScreen/styles.js","screens/HatScreen/index.js","router/index.js","App/index.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","FooterContainer","styled","footer","Link","NavLink","Footer","to","Container","div","MagicBall","props","translateY","ScoreboardAnswers","AnsverText","p","opacity","AnswerButton","button","ReloadButton","magicBallAnswersArr","CrystalBallScreen","getAnswer","setState","disabledButton","translate","translateReverse","intervalId","setInterval","max","textOpacity","clearInterval","answer","Math","floor","random","reloadPage","state","this","onClick","disabled","React","Component","PredictionScreen","HatScreen","Router","exact","path","component","crystalBallScreen","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ee5e98ba.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css?family=Roboto&display=swap');\n  * {\n    padding: 0;\n    margin: 0;\n    font-family: 'Roboto', sans-serif;\n    border: 0;\n    outline: 0;\n    background-color: transparent;\n    word-wrap: break-word;\n    box-sizing: border-box;\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  }\n  html, body, #root {\n    height: 100%;\n  }\n  body {\n    min-width: 320px;\n  }\n\n  button {\n    cursor: pointer;\n    transition: transform 0.2s;\n  }\n\n  button:active {\n    transform: scale(1.1);\n  }\n\n  .active {\n    opacity: 0.5;\n    background-color: #182d4e;\n  }\n`;\n\nexport default GlobalStyle;\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const FooterContainer = styled.footer`\n  height: 60px;\n  background-color: #3c6fc2;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const Link = styled(NavLink)`\n  font-size: 20px;\n  color: white;\n  text-decoration: none;\n  width: 33.33%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  @media (max-width: 736px) {\n    font-size: 17px;\n  }\n\n  @media (max-width: 360px) {\n    font-size: 14px;\n  }\n`;\n","import React from 'react';\nimport { FooterContainer, Link } from './styles';\n\nconst Footer = () => {\n  return (\n    <FooterContainer>\n      <Link to=\"/crystalBall\">Magic 8 ball</Link>\n      <Link to=\"/prediction\">Предсказания</Link>\n      <Link to=\"/hat\">Шапка</Link>\n    </FooterContainer>\n  );\n};\n\nexport default Footer;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  height: calc(100% - 60px);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  background-color: whitesmoke;\n  padding: 20px;\n`;\n\nexport const MagicBall = styled.div`\n  height: 400px;\n  width: 400px;\n  border-radius: 200px;\n  background-color: #191919;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: linear-gradient(to top right, black 33%, #171717 66%, gray 100%);\n  transform: translateY(${(props) => props.translateY}px);\n\n  @media (max-width: 736px) {\n    width: 350px;\n    height: 350px;\n  }\n\n  @media (max-width: 360px) {\n    width: 300px;\n    height: 300px;\n  }\n`;\n\nexport const ScoreboardAnswers = styled.div`\n  height: 200px;\n  width: 200px;\n  border-radius: 100px;\n  background-color: white;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  text-align: center;\n  padding: 5px;\n\n  @media (max-width: 360px) {\n    width: 185px;\n    height: 185px;\n  }\n`;\n\nexport const AnsverText = styled.p`\n  color: black;\n  opacity: ${(props) => props.opacity};\n  font-size: 20px;\n  line-height: 20px;\n\n  @media (max-width: 360px) {\n    font-size: 16px;\n  }\n`;\n\nexport const AnswerButton = styled.button`\n  background-color: lightgray;\n  padding: 20px 40px;\n  border-radius: 10px;\n  color: black;\n  font-size: 20px;\n`;\n\nexport const ReloadButton = styled.button`\n  padding: 5px;\n  border-radius: 5px;\n  background-color: #3c6fc2;\n  color: white;\n  font-size: 20px;\n  align-self: flex-end;\n`;\n","const magicBallAnswersArr = [\n  'Бесспорно',\n  'Предрешено',\n  'Никаких сомнений',\n  'Определённо да',\n  'Можешь быть уверен в этом',\n  'Мне кажется — «да»',\n  'Вероятнее всего',\n  'Хорошие перспективы',\n  'Знаки говорят — «да»',\n  'Да',\n  'Пока не ясно, попробуй снова',\n  'Спроси позже',\n  'Лучше не рассказывать',\n  'Сейчас нельзя предсказать',\n  'Сконцентрируйся и спроси опять',\n  'Даже не думай',\n  'Мой ответ — «нет»',\n  'По моим данным — «нет»',\n  'Перспективы не очень хорошие',\n  'Весьма сомнительно',\n  'А все уже, а надо было раньше',\n];\n\nexport default magicBallAnswersArr;\n","import React from 'react';\nimport {\n  Container,\n  ScoreboardAnswers,\n  AnsverText,\n  AnswerButton,\n  MagicBall,\n  ReloadButton,\n} from './styles';\nimport getRandomInt from '../../constants/getRandomIntFunction';\nimport magicBallAnswersArr from '../../constants/magicBallAnswersArr';\n\nclass CrystalBallScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      answer: 'Спроси меня!',\n      textOpacity: 1,\n      disabledButton: false,\n      translateY: 0,\n    };\n  }\n\n  getAnswer = () => {\n    this.setState({ disabledButton: true });\n    let opacity = 1;\n    let translate = 0;\n    let translateReverse = false;\n    let intervalId = setInterval(() => {\n      if (translate < 12 && !translateReverse) {\n        translate += 2;\n        this.setState({ translateY: translate });\n        if (translate === 12) {\n          translateReverse = true;\n        }\n      } else if (translate >= -12 && translateReverse) {\n        translate -= 2;\n        this.setState({ translateY: translate });\n        if (translate === -12) {\n          translateReverse = false;\n        }\n      }\n      if (opacity > 0) {\n        opacity -= 0.02;\n        this.setState({ textOpacity: opacity });\n      } else {\n        clearInterval(intervalId);\n        this.setState({\n          answer: magicBallAnswersArr[getRandomInt(21)],\n          translateY: 0,\n        });\n        intervalId = setInterval(() => {\n          if (opacity < 1) {\n            opacity += 0.025;\n            this.setState({ textOpacity: opacity });\n          } else {\n            clearInterval(intervalId);\n            this.setState({ disabledButton: false });\n          }\n        }, 20);\n      }\n    }, 20);\n  };\n\n  reloadPage = () => {\n    this.setState({ answer: 'Спроси меня!' });\n  };\n\n  render() {\n    const { answer, textOpacity, disabledButton, translateY } = this.state;\n    return (\n      <Container>\n        <ReloadButton onClick={this.reloadPage} disabled={disabledButton}>\n          Перезагрузка\n        </ReloadButton>\n        <MagicBall translateY={translateY}>\n          <ScoreboardAnswers>\n            <AnsverText opacity={textOpacity}>{answer}</AnsverText>\n          </ScoreboardAnswers>\n        </MagicBall>\n        <AnswerButton onClick={this.getAnswer} disabled={disabledButton}>\n          Получить ответ\n        </AnswerButton>\n      </Container>\n    );\n  }\n}\n\nexport default CrystalBallScreen;\n","export default function getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  height: calc(100% - 60px);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  background-color: whitesmoke;\n  padding: 20px;\n`;\n","import React from 'react';\nimport { Container } from './styles';\n\nconst PredictionScreen = () => {\n  return <Container>Ожидается в скором времени!</Container>;\n};\n\nexport default PredictionScreen;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  height: calc(100% - 60px);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  background-color: whitesmoke;\n  padding: 20px;\n`;\n","import React from 'react';\nimport { Container } from './styles';\n\nconst HatScreen = () => {\n  return <Container>Ожидается в скором времени!</Container>;\n};\n\nexport default HatScreen;\n","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport Footer from '../components/Footer';\nimport crystalBallScreen from '../screens/CrystalBallScreen';\nimport PredictionScreen from '../screens/PredictionScreen';\nimport HatScreen from '../screens/HatScreen';\n\nconst Router = () => {\n  return (\n    <HashRouter>\n      <Route exact path=\"/crystalBall\" component={crystalBallScreen} />\n      <Route path=\"/prediction\" component={PredictionScreen} />\n      <Route path=\"/hat\" component={HatScreen} />\n      <Footer />\n    </HashRouter>\n  );\n};\n\nexport default Router;\n","import React from 'react';\nimport GlobalStyle from './styles';\nimport Router from '../router';\n\nconst App = () => {\n  return (\n    <>\n      <Router />\n      <GlobalStyle />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}